" first do  -->   ln -s .myVim/ .vim
" User guide ---> ~/.vim/UserDoc



call plug#begin('~/.vim/plugged')

" 底部状态栏高亮
"Plug 'itchyny/lightline.vim'

" 目录树
Plug 'preservim/nerdtree'

" 添加括号
Plug 'jiangmiao/auto-pairs'

" status bar 
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" 快速查找
" Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }

"theme
" Plug 'joshdick/onedark.vim'
" Plug 'rakr/vim-one'
Plug 'rafi/awesome-vim-colorschemes'

" 快速注释
Plug 'preservim/nerdcommenter'

Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'luochen1990/rainbow'
Plug 'yianwillis/vimcdoc'


call plug#end()



" ==========nerdtree目录树===========
"shortcut
map <C-b> :NERDTreeToggle<CR>

" autocmd vimenter * NERDTree  "自动开启Nerdtree
let g:NERDTreeWinSize = 25 "设定 NERDTree 视窗大小
" let NERDTreeShowBookmarks=1  " 开启Nerdtree时自动显示Bookmarks
"打开vim时如果没有文件自动打开NERDTree
" autocmd vimenter * if !argc()|NERDTree|endif
"当NERDTree为剩下的唯一窗口时自动关闭
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" 设置树的显示图标
let g:NERDTreeDirArrowExpandable = '+'
let g:NERDTreeDirArrowCollapsible = '-'
let NERDTreeIgnore = ['\.pyc$']  " 过滤所有.pyc文件不显示
let g:NERDTreeShowLineNumbers=0 " 是否显示行号
let g:NERDTreeHidden=0     "不显示隐藏文件
""Making it prettier
" let NERDTreeMinimalUI = 1
" let NERDTreeDirArrows = 1
" ==================================





"===========theme==============================
colorscheme onedark
" colorscheme seoul256
" set background=dark " for the dark version
" set background=light " for the light version
"===============================================




"===============for zh=============================================
" 设置中文提示
language messages zh_CN.utf-8 
" 设置中文帮助
set helplang=cn

" Gvim中文菜单乱码解决方案
" 设置文件编码格式
set encoding=utf-8
set fileencodings=utf-8,chinese,latin-1,gbk,gb18030,gk2312
if has("win32")
 set fileencoding=chinese
else
 set fileencoding=utf-8
endif

"解决菜单乱码
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

"解决consle提示信息输出乱码
language messages zh_CN.utf-8
"=================================================================






"======================airline-config================================
" 总是显示状态栏 
let laststatus = 2
let g:airline_powerline_fonts = 1   " 使用powerline打过补丁的字体
" let g:airline_theme="violet"      " 设置主题
let g:airline_theme="deus"
" 开启tabline
let g:airline#extensions#tabline#enabled = 1      "tabline中当前buffer两端的分隔字符
let g:airline#extensions#tabline#left_sep = ' '   "tabline中未激活buffer两端的分隔字符
let g:airline#extensions#tabline#left_alt_sep = '|'      "tabline中buffer显示编号
"let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#formatter = 'default'
let g:airline#extensions#tabline#buffer_nr_show = 0
let g:airline#extensions#tabline#fnametruncate = 16
let g:airline#extensions#tabline#fnamecollapse = 2
let g:airline#extensions#tabline#buffer_idx_mode = 1

"
" if !exists('g:airline_symbols')
"     let g:airline_symbols={}
" endif
" " 关闭空白符检测
" let g:airline#extensions#whitespace#enabled=0

" ===========================================================




"=========================rainbow=======================
let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
"=======================================================





"==============================gui=======================================
" 字体 
if has("gui_running")
  set lines=28 columns=108 "设置初始行列数，仅GUI生效
  set guioptions-=r  " 去除滚动
  set guioptions-=T  "去除工具栏
  if has("gui_gtk3")
    set guifont=Inconsolata\ 12
    set guifont=MesloLGL\ Nerd\ Font\ Mono\ 15
  elseif has("gui_macvim")
    set guifont=Menlo\ Regular:h14
  elseif has("gui_win32")
    set guifont=DroidSansMono\ NF:h14:cANSI
    "set guifont=MesloLGL\ NF:h13:cANSI
    "set guifont=MesloLGM\ NF:h13:cANSI
  endif
endif
"======================================================================




"=============================nerdcommenter配置=========================
"<leader>cc快捷键进行注释选中的行，<leader>cu进行反注释。 或者 <\>+<c>+<space>
"n<\>cc : 为光标以下 n 行添加注释
"n<\>cu : 为光标以下 n 行取消注释
"n<\>cm : 为光标以下 n 行添加块注释
" >>>>>>>vim中  ctrl+非字母 不能映射，Ctrl+Shift+其他  也不能。
"map <C-/> <Leader>c<Space>
"map <C-/> <plug>NERDCommenterToggle


"add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" python 自动的会多加一个空格
au FileType python let g:NERDSpaceDelims = 0
 
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
 
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
 
" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1
 
" Add your own custom formats or override the defaults
" let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
 
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
 
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
 
" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1
"=========================================================================


" +================================== coc.nvim  ======================================+ "
" if hidden is not set, TextEdit might fail.
set hidden
" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup
 
" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300
 
" don't give |ins-completion-menu| messages.
set shortmess+=c
 
" always show signcolumns
set signcolumn=yes
 
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
 
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
 
" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()
 
" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
 
" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
 
" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
 
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
 
" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')
 
" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)
 
" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
 
augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end
 
" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)
 
" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)
 
" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)
 
" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')
 
" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)
 
" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
"
" inoremap <silent><expr> <TAB>
"       \ pumvisible() ? coc#_select_confirm() :
"       \ coc#expandableOrJumpable() ? \"\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
"       \ <SID>check_back_space() ? \"\<TAB>" :
"       \ coc#refresh()
"
" function! s:check_back_space() abort
"   let col = col('.') - 1
"   return !col || getline('.')[col - 1]  =~# '\s'
" endfunction
"
" let g:coc_snippet_next = '<tab>'
"=======================================================================================



"=========================other=============================

"用空格键来开关折叠（说明西方“"”后面的内容为注释，不会被VIM所识别）
set foldenable
set foldmethod=indent  "按缩进
"set foldmethod=syntax  "按语法
nmap <space> za
" "nnoremap @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')



" 解决插入模式下delete/backspce键失效问题
set backspace=2


set number "显示行号

"共享剪切板
set clipboard+=unnamed 

" 映射切换buffer的键位
nnoremap [b :bp<CR>
nnoremap ]b :bn<CR>



set t_Co=256
set lazyredraw

""""""""""""""""""""""""""""""""""""""""""
""" airline设置
""""""""""""""""""""""""""""""""""""""""""
" 总是显示状态栏
" let laststatus = 2
" let g:airline_powerline_fonts = 1   " 使用powerline打过补丁的字体
" let g:airline_theme="violet"      " 设置主题
" " 开启tabline
" let g:airline#extensions#tabline#enabled = 1      "tabline中当前buffer两端的分隔字符
" "let g:airline#extensions#tabline#left_sep = ' '   "tabline中未激活buffer两端的分隔字符
" "let g:airline#extensions#tabline#left_alt_sep = '|'      "tabline中buffer显示编号
" "let g:airline#extensions#tabline#buffer_nr_show = 1
"
" "let g:airline_theme='base16-spacemacs'
"
" set t_Co=256
" set lazyredraw
"
" if !exists('g:airline_symbols')
"     let g:airline_symbols={}
" endif
" " 关闭空白符检测
" let g:airline#extensions#whitespace#enabled=0
"

                                                                                                                                           
let g:airline_section_b = '%{getcwd()}' " in section B of the status line display the CWD                                                 
                                                                                                                                          
"TABLINE:                                                                                                                                 
                                                                                                                                          
" let g:airline#extensions#tabline#enabled = 1           " enable airline tabline
" let g:airline#extensions#tabline#show_close_button = 0 " remove 'X' at the end of the tabline
" let g:airline#extensions#tabline#tabs_label = ''       " can put text here like BUFFERS to denote buffers (I clear it so nothing is shown)
let g:airline#extensions#tabline#buffers_label = ''    " can put text here like TABS to denote tabs (I clear it so nothing is shown)
" let g:airline#extensions#tabline#fnamemod = ':t'       " disable file paths in the tab
" let g:airline#extensions#tabline#show_tab_count = 0    " dont show tab numbers on the right
" let g:airline#extensions#tabline#show_buffers = 0      " dont show buffers in the tabline
" let g:airline#extensions#tabline#tab_min_count = 2     " minimum of 2 tabs needed to display the tabline
" let g:airline#extensions#tabline#show_splits = 0       " disables the buffer name that displays on the right of the tabline
" let g:airline#extensions#tabline#show_tab_nr = 0       " disable tab numbers
let g:airline#extensions#tabline#show_tab_type = 0     " disables the weird ornage arrow on the tabline
" 清空缓冲区 关闭buffer
nmap <C-q> :bwipe<CR>


